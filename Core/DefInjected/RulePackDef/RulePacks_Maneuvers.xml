<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  
  <!-- EN:
    <li>damaged_inf->bite</li>
    <li>damaged_inf->chomp</li>
    <li>damaged_inf(p=0.5)->nip</li>
    <li>damaged_past->bit</li>
    <li>damaged_past->chomped</li>
    <li>damaged_past->nipped</li>
    <li>damaged_past->gnawed</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_present->biting</li>
    <li>damaged_present->chomping</li>
    <li>damaged_present->nipped</li>
    <li>damaged_present->gnawing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->leaving grisly tears in the metal</li>
    <li>destroyed_past->tore off</li>
    <li>destroyed_past->ripped off</li>
    <li>destroyed_past->bit off</li>
    <li>destroyed_present->tearing off</li>
    <li>destroyed_present->ripping off</li>
    <li>destroyed_present->biting off</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix->[to] chunks</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] shreds</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] strips</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
  -->
  <Maneuver_Bite.rulePack.rulesStrings>
    <li>damaged_inf->beißen</li>
    <li>damaged_past->biss</li>
    <li>damaged_present->beißt</li>
    <li>was_damaged->gebissen</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->das darunterliegende Fleisch freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->die interne Maschinerie freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Drone)->die interne Maschinerie freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->grässliche Spuren in der Haut hinterließ</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->grässliche Spuren im Metall hinterließ</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Drone)->grässliche Spuren im Metall hinterließ</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine riesige Bisswunde hinterließ</li>
    <li>destroyed_past->zerbiss</li>
    <li>destroyed_past->zerkaute</li>
    <li>destroyed_past->zerriss</li>
    <li>destroyed_past->zerfraß</li>
    <li>destroyed_present->zerbeißt</li>
    <li>destroyed_present->zerkaut</li>
    <li>destroyed_present->zerreißt</li>
    <li>destroyed_present->zerfrisst</li>
    <li>destroyed_suffix->in Stücke</li>
    <li>destroyed_suffix->in Teile</li>
    <li>was_destroyed->zerbissen</li>
    <li>was_destroyed->zerkaut</li>
    <li>was_destroyed->zerrissen</li>
    <li>was_destroyed->zerfressen</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->in Fetzen</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->in Streifen</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->in blutige Streifen</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->bis zur Unkenntlichkeit</li>
  </Maneuver_Bite.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] dodged out of the way.</li>
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] blocked it.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] versuchte, [TOOL_label] in [RECIPIENT_label]'s [eyes] zu werfen, aber [RECIPIENT_definite] wich aus.</li>
    <li>r_logentry->[INITIATOR_definite] versuchte, [TOOL_label] in [RECIPIENT_label]'s [eyes] zu werfen, aber [RECIPIENT_definite] konnte es abwehren.</li>
    <li>eyes(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=Drone)->Augen</li>
    <li>eyes(RECIPIENT_flesh==Drone)->Optiksensoren</li>
    <li>eyes(RECIPIENT_flesh==Mechanoid)->Optiksensoren</li>
  </Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] kicked [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] kicked a spray of [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] warf [TOOL_label] in [RECIPIENT_label]'s [eyes].</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] warf eine Ladung [TOOL_label] in [RECIPIENT_label]'s [eyes].</li>
    <li>eyes(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=Drone)->Augen</li>
    <li>eyes(RECIPIENT_flesh==Drone)->Optiksensoren</li>
    <li>eyes(RECIPIENT_flesh==Mechanoid)->Optiksensoren</li>
  </Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but missed.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] versuchte, [TOOL_label] in [RECIPIENT_label]'s [eyes] zu werfen, aber verfehlte.</li>
    <li>eyes(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=Drone)->Augen</li>
    <li>eyes(RECIPIENT_flesh==Drone)->Optiksensoren</li>
    <li>eyes(RECIPIENT_flesh==Mechanoid)->Optiksensoren</li>
  </Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=2)->poke</li>
    <li>damaged_inf(p=2)->jab</li>
    <li>damaged_inf->prod</li>
    <li>damaged_inf->shove</li>
    <li>damaged_inf->stab</li>
    <li>damaged_past(p=2)->poked</li>
    <li>damaged_past(p=2)->jabbed</li>
    <li>damaged_past->prodded</li>
    <li>damaged_past->shoved</li>
    <li>damaged_past->stabbed</li>
    <li>damaged_present(p=2)->poking</li>
    <li>damaged_present(p=2)->jabbing</li>
    <li>damaged_present->prodding</li>
    <li>damaged_present->shoving</li>
    <li>damaged_present->stabbing</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Poke.rulePack.rulesStrings>
    <li>damaged_inf->stoßen</li>
    <li>damaged_past->stieß</li>
    <li>damaged_present->stößt</li>
    <li>was_damaged->gestoßen</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine riesige Prellung hinterließ</li>
    <li>flavortext_consequence->den Bereich sichtlich deformierte</li>
    <li>flavortext_consequence->[RECIPIENT_objective] aus dem Gleichgewicht brachte</li>
    <li>flavortext_consequence->[RECIPIENT_objective] zur Seite stieß</li>
    <li>destroyed_past->zerschmetterte</li>
    <li>destroyed_past->zerdrückte</li>
    <li>destroyed_past->zerstörte</li>
    <li>destroyed_past->zerbrach</li>
    <li>destroyed_present->zerschmettert</li>
    <li>destroyed_present->zerdrückt</li>
    <li>destroyed_present->zerstört</li>
    <li>destroyed_present->zerbrochen</li>
    <li>was_destroyed->zerschmettert</li>
    <li>was_destroyed->zerdrückt</li>
    <li>was_destroyed->zerstört</li>
    <li>was_destroyed->zerbrochen</li>
    <li>destroyed_suffix->in Stücke</li>
    <li>destroyed_suffix->in kleine Teile</li>
    <li>destroyed_suffix->zu Staub</li>
    <li>destroyed_suffix->in Fragmente</li>
  </Maneuver_Poke.rulePack.rulesStrings>
  
  <!-- EN:
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->and exposing the flesh underneath</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->and exposing the machinery underneath</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->and leaving a gory [woundname]</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] messy pieces</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] fragments</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] a pile of gore</li>
  -->
  <Maneuver_Scratch.rulePack.rulesStrings>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->das darunterliegende Fleisch freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->die interne Maschinerie freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Drone)->die interne Maschinerie freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine blutende Kratzwunde hinterließ</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->in blutige Streifen</li>
    <li>destroyed_suffix->in Streifen</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->in blutige Stücke</li>
    <li>destroyed_suffix->in Stücke</li>
    <li>destroyed_suffix->in Fragmente</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->zu einem Bluthaufen</li>
  </Maneuver_Scratch.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->scratch</li>
    <li>damaged_inf(deflected!=True)->lacerate</li>
    <li>damaged_inf(deflected!=True)->tear</li>
    <li>damaged_inf->cut</li>
    <li>damaged_past(p=4)->scratched</li>
    <li>damaged_past(deflected!=True)->lacerated</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_past->cut</li>
    <li>damaged_present->scratching</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present->cutting</li>
    <li>destroyed_past->mauled</li>
    <li>destroyed_past->lacerated</li>
    <li>destroyed_past->tore</li>
    <li>destroyed_past->shredded</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_present->mauling</li>
    <li>destroyed_present->lacerating</li>
    <li>destroyed_present->tearing</li>
    <li>destroyed_present->shredding</li>
    <li>destroyed_present->ripping</li>
  -->
  <Maneuver_Scratch_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->kratzen</li>
    <li>damaged_inf->ritzen</li>
    <li>damaged_past(p=4)->kratzte</li>
    <li>damaged_past->schnitt</li>
    <li>damaged_past->ritzte</li>
    <li>damaged_present(p=4)->kratzt</li>
    <li>damaged_present->schneidet</li>
    <li>damaged_present->ritzt</li>
    <li>was_damaged->gekratzt</li>
    <li>destroyed_past->verstümmelte</li>
    <li>destroyed_past->zerfleischte</li>
    <li>destroyed_past->zerriss</li>
    <li>destroyed_past->zerfetzte</li>
    <li>destroyed_past->zerstückelte</li>
    <li>destroyed_present->verstümmelt</li>
    <li>destroyed_present->zerfleischt</li>
    <li>destroyed_present->zerreißt</li>
    <li>destroyed_present->zerfetzt</li>
    <li>destroyed_present->zerstückelt</li>
    <li>was_destroyed->verstümmelt</li>
    <li>was_destroyed->zerfleischt</li>
    <li>was_destroyed->zerrissen</li>
    <li>was_destroyed->zerfetzt</li>
    <li>was_destroyed->zerstückelt</li>
  </Maneuver_Scratch_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->slash</li>
    <li>damaged_inf->cut</li>
    <li>damaged_inf->chop</li>
    <li>damaged_inf->hack</li>
    <li>damaged_inf->slice</li>
    <li>damaged_inf(deflected!=True)->gash</li>
    <li>damaged_past(p=4)->slashed</li>
    <li>damaged_past->cut</li>
    <li>damaged_past->chopped</li>
    <li>damaged_past->hacked</li>
    <li>damaged_past->sliced</li>
    <li>damaged_past(deflected!=True)->gashed</li>
    <li>damaged_present->slashing</li>
    <li>damaged_present->cutting</li>
    <li>damaged_present->slicing</li>
    <li>damaged_present(deflected!=True)->gashing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving a gory [woundname]</li>
    <li>destroyed_past->bisected</li>
    <li>destroyed_past->divided</li>
    <li>destroyed_past->halved</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->split</li>
    <li>destroyed_present->bisecting</li>
    <li>destroyed_present->dividing</li>
    <li>destroyed_present->halving</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->splitting</li>
    <li>destroyed_suffix->into neat pieces</li>
    <li>destroyed_suffix->cleanly</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
  -->
  <Maneuver_Slash.rulePack.rulesStrings>
    <li>damaged_inf->schneiden</li>
    <li>damaged_inf->schlitzen</li>
    <li>damaged_past->schnitt</li>
    <li>damaged_past->schlitzte</li>
    <li>damaged_present->schneidet</li>
    <li>damaged_present->schlitzt</li>
    <li>was_damaged->geschnitten</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->das darunterliegende Fleisch freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->die interne Maschinerie freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Drone)->die interne Maschinerie freilegte</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine riesige Schnittwunde hinterließ</li>
    <li>destroyed_past->zweiteilte</li>
    <li>destroyed_past->spaltete</li>
    <li>destroyed_past->halbierte</li>
    <li>destroyed_past->zerstückelte</li>
    <li>destroyed_present->zweiteilt</li>
    <li>destroyed_present->spaltet</li>
    <li>destroyed_present->halbiert</li>
    <li>destroyed_present->zerstückelt</li>
    <li>was_destroyed->gezweiteilt</li>
    <li>was_destroyed->gespaltet</li>
    <li>was_destroyed->halbiert</li>
    <li>was_destroyed->zerstückelt</li>
    <li>destroyed_suffix->in feine Stücke</li>
    <li>destroyed_suffix->fein säuberlich</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->, um das Innenleben freizulegen</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->, um es in zwei Hälften aufzuteilen</li>
  </Maneuver_Slash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Smash.rulePack.rulesStrings>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine riesige Prellung hinterließ</li>
    <li>flavortext_consequence->den Bereich sichtlich deformierte</li>
    <li>flavortext_consequence->[RECIPIENT_objective] aus dem Gleichgewicht brachte</li>
    <li>flavortext_consequence->[RECIPIENT_objective] zur Seite stieß</li>
    <li>destroyed_suffix->in Stücke</li>
    <li>destroyed_suffix->in kleine Teile</li>
    <li>destroyed_suffix->zu Staub</li>
    <li>destroyed_suffix->in Fragmente</li>
  </Maneuver_Smash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf->hit</li>
    <li>damaged_inf->smash</li>
    <li>damaged_inf->bash</li>
    <li>damaged_inf->slam</li>
    <li>damaged_inf->strike</li>
    <li>damaged_inf->beat</li>
    <li>damaged_past->hit</li>
    <li>damaged_past->smashed</li>
    <li>damaged_past->bashed</li>
    <li>damaged_past->slammed</li>
    <li>damaged_past->struck</li>
    <li>damaged_past->beat</li>
    <li>damaged_present->smashing</li>
    <li>damaged_present->bashing</li>
    <li>damaged_present(deflected!=True)->bruising</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->breaking</li>
  -->
  <Maneuver_Smash_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=3)->schlagen</li>
    <li>damaged_inf->rammen</li>
    <li>damaged_inf->hauen</li>
    <li>damaged_past(p=3)->schlug</li>
    <li>damaged_past->rammte</li>
    <li>damaged_past->haute</li>
    <li>damaged_present(p=3)->schlägt</li>
    <li>damaged_present->rammt</li>
    <li>damaged_present->haut</li>
    <li>was_damaged(p=3)->geschlagen</li>
    <li>was_damaged->gerammt</li>
    <li>was_damaged->gehauen</li>
    <li>destroyed_past->zerquetschte</li>
    <li>destroyed_past->zerschmetterte</li>
    <li>destroyed_past->zertrümmerte</li>
    <li>destroyed_past->zerbarst</li>
    <li>destroyed_present->zerquetscht</li>
    <li>destroyed_present->zerschmettert</li>
    <li>destroyed_present->zertrümmert</li>
    <li>destroyed_present->zerberstet</li>
    <li>was_destroyed->zerquetscht</li>
    <li>was_destroyed->zerschmettert</li>
    <li>was_destroyed->zertrümmert</li>
    <li>was_destroyed->zerborsten</li>
  </Maneuver_Smash_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->stab</li>
    <li>damaged_inf->jab</li>
    <li>damaged_inf(deflected!=True)->pierce</li>
    <li>damaged_inf(deflected!=True)->puncture</li>
    <li>damaged_inf(deflected!=True)->skewer</li>
    <li>damaged_past(p=4)->stabbed</li>
    <li>damaged_past->jabbed</li>
    <li>damaged_past(deflected!=True)->pierced</li>
    <li>damaged_past(deflected!=True)->punctured</li>
    <li>damaged_past(deflected!=True)->skewered</li>
    <li>damaged_present(deflected!=True)->piercing</li>
    <li>damaged_present(deflected!=True)->puncturing</li>
    <li>damaged_present(deflected!=True)->penetrating</li>
    <li>damaged_present(deflected!=True)->skewering</li>
    <li>woundname->hole</li>
    <li>woundname->wound</li>
    <li>woundname->crevice</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving a torn [woundname]</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>
    <li>destroyed_past->impaled</li>
    <li>destroyed_past->perforated</li>
    <li>destroyed_past->skewered</li>
    <li>destroyed_present->impaling</li>
    <li>destroyed_present->perforating</li>
    <li>destroyed_present->skewering</li>
    <li>destroyed_suffix->straight through</li>
    <li>destroyed_suffix->leaving a clean hole</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
  -->
  <Maneuver_Stab.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->stechen</li>
    <li>damaged_inf->piksen</li>
    <li>damaged_past(p=4)->stach</li>
    <li>damaged_past->pikste</li>
    <li>damaged_present(p=4)->sticht</li>
    <li>damaged_present->pikst</li>
    <li>was_damaged(p=4)->gestochen</li>
    <li>was_damaged->gepikst</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine blutige Stichwunde hinterließ</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine aufgerissene Stichwunde hinterließ</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone)->eine blutende Stichwunde hinterließ</li>
    <li>destroyed_past->pfählte</li>
    <li>destroyed_past->durchlöcherte</li>
    <li>destroyed_past->durchbohrte</li>
    <li>destroyed_past->durchstach</li>
    <li>destroyed_present->pfählt</li>
    <li>destroyed_present->durchlöchert</li>
    <li>destroyed_present->durchbohrt</li>
    <li>destroyed_present->durchsticht</li>
    <li>was_destroyed->gepfählt</li>
    <li>was_destroyed->durchlöchert</li>
    <li>was_destroyed->durchbohrt</li>
    <li>was_destroyed->durchstochen</li>
    <li>destroyed_suffix->wie durch Butter</li>
    <li>destroyed_suffix->, was ein sauberes Loch hinterließ</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,RECIPIENT_flesh!=EntityMechanical,RECIPIENT_flesh!=Drone,target_part_destroyed_count==1)->, was eine blutige Pfütze hinterließ</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->, was unbekannte Flüssigkeiten austreten ließ</li>
  </Maneuver_Stab.rulePack.rulesStrings>
  
</LanguageData>